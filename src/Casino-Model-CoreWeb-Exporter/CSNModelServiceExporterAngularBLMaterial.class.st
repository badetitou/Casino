"
I export Services into Angular

- actions
- effects
- reducers
- services
"
Class {
	#name : #CSNModelServiceExporterAngularBLMaterial,
	#superclass : #CSNModelExporterAngular,
	#traits : 'TCSNExporter',
	#classTraits : 'TCSNExporter classTrait',
	#instVars : [
		'rootFolder'
	],
	#category : #'Casino-Model-CoreWeb-Exporter-BLMaterial'
}

{ #category : #accessing }
CSNModelServiceExporterAngularBLMaterial >> actionsFolder [

	^ self rootFolder / 'actions'
]

{ #category : #accessing }
CSNModelServiceExporterAngularBLMaterial >> effectsFolder [

	^ self rootFolder / 'effects'
]

{ #category : #generating }
CSNModelServiceExporterAngularBLMaterial >> generateAction: aCSNService [
	self actionsFolder ensureCreateDirectory.
]

{ #category : #generating }
CSNModelServiceExporterAngularBLMaterial >> generateEffect: aCSNService [
	self effectsFolder ensureCreateDirectory.
]

{ #category : #generating }
CSNModelServiceExporterAngularBLMaterial >> generateReducer: aCSNService [
	self reducersFolder ensureCreateDirectory.
]

{ #category : #api }
CSNModelServiceExporterAngularBLMaterial >> generateService: aCSNService [
	self generateServiceFile: aCSNService.
	self generateReducer: aCSNService.
	self generateEffect: aCSNService.
	self generateAction: aCSNService.
]

{ #category : #generating }
CSNModelServiceExporterAngularBLMaterial >> generateServiceAPI: aServiceAPI [
		self
		<< '// TODO: Please check this service';
		crlf.
	self << 'public ' <<< aServiceAPI uniqueName <<< '('.
	aServiceAPI printParameterIn: self.

	self <<< '): Observable<'.
	aServiceAPI dataType ifNotNil: [ aServiceAPI dataType writeBusinessTypeOn: self] .
	self <<< '> {'.
	self indentPlus.
	aServiceAPI isGET
		ifTrue: [ aServiceAPI printCreateParamIn: self ]
		ifFalse: [ aServiceAPI printCreateFormDataIn: self ].
	self crlf.
	self << 'return this.http.'.
	aServiceAPI printRestTypeIn: self.
	self <<< '<'.
	aServiceAPI dataType ifNotNil: [ aServiceAPI dataType writeBusinessTypeOn: self] .
	self <<< '>(''/ws/' <<< aServiceAPI serviceOwner targetPoint asKebabCase <<< '/' <<< aServiceAPI name asKebabCase <<< ''''.
	self indentPlus.
	aServiceAPI isPOST
		ifTrue: [ self
				<<< ',';
				crlf;
				<< 'formData' ].
	self
		<<< ', {';
		crlf.
	self << 'withCredentials: true'.
	(aServiceAPI isGET and: [ aServiceAPI source isNotNil and: [ aServiceAPI source parameters isNotEmpty ] ])
		ifTrue: [ self
				<<< ',';
				crlf;
				<< 'params: params' ].
	self
		crlf;
		indentMinus;
		<< '}).pipe(first()'.
	aServiceAPI dataType ifNotNil: [:dateType | dateType innerType isBusinessType
		ifTrue: [ self
				<<< ',';
				crlf;
				indentPlus;
				<< 'map(res => ';
				inBraces: [ self << 'return '.
					aServiceAPI dataType printServiceDeserializeOn: self ];
				<<< ')';
				indentMinus ]].
	self
		crlf;
		<< ');';
		crlf;
		indentMinus;
		<< '}';
		crlf
]

{ #category : #generating }
CSNModelServiceExporterAngularBLMaterial >> generateServiceFile: aCSNService [
	self serviceFolder ensureCreateDirectory.
	self serviceFolder / aCSNService getTSName
		writeStreamDo: [ :stream | 
			self currentWriteStream: stream.
			self
				<<
					'import { Injectable } from ''@angular/core'';

import { Observable } from ''rxjs'';
import { first, map } from ''rxjs/operators'';

import { HttpClient, HttpHeaders, HttpParams } from ''@angular/common/http'';
import { ObjectMapper } from ''@outfoxx/jackson-js'';
import { MapToStringJsonConverterService } from ''app/projects/bl-shell/src/public-api'';
';
				crlf;
				crlf.

			self printServiceDependencies: aCSNService.

			self
				<<
					'/**
 * Generated By Casino
 *
 * @author BenoÃ®t Verhaeghe
 */
@Injectable()
export class ' << aCSNService uniqueName
				<<
					' {

    private objectMapper: ObjectMapper;

    constructor(private http: HttpClient,
        private mapToStringConverter: MapToStringJsonConverterService) {
        this.objectMapper = new ObjectMapper({},
            { features: { deserialization: { FAIL_ON_UNKNOWN_PROPERTIES: false } }});
    }

'.
			(aCSNService actions sorted: #uniqueName ascending)
				do: [ :action | 
					self indentPlus.
					action accept: self.
					self indentMinus ]
				separatedBy: [ self crlf ].
			self
				<< '}';
				crlf ]
]

{ #category : #generating }
CSNModelServiceExporterAngularBLMaterial >> printServiceDependencies: aCSNService [
	aCSNService dependencies
		ifNotEmpty: [ :dependencies | 
			self << 'import { '; indentPlus.
			(dependencies asOrderedCollection sorted: #name ascending)
				do: [ :dependency | self <<< dependency name ]
				separatedBy: [ self
						<<< ',';
						crlf;
						indent ].
			self <<< ' } from ''../models'';'; indentMinus.
			self
				crlf;
				crlf ]
]

{ #category : #accessing }
CSNModelServiceExporterAngularBLMaterial >> reducersFolder [

	^ self rootFolder / 'reducers'
]

{ #category : #accessing }
CSNModelServiceExporterAngularBLMaterial >> rootFolder [

	^ rootFolder
]

{ #category : #accessing }
CSNModelServiceExporterAngularBLMaterial >> rootFolder: anObject [

	rootFolder := anObject
]

{ #category : #accessing }
CSNModelServiceExporterAngularBLMaterial >> serviceFolder [

	^ self rootFolder / 'services'
]
