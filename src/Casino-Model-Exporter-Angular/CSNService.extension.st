Extension { #name : #CSNService }

{ #category : #'*Casino-Model-Exporter-Angular' }
CSNService >> getLocalPath [
	^ 'services/', self getServiceName  
]

{ #category : #'*Casino-Model-Exporter-Angular' }
CSNService >> getServiceName [
	^ self uniqueName , '.service'
]

{ #category : #'*Casino-Model-Exporter-Angular' }
CSNService >> getTSName [
	^ self getServiceName , '.ts'
]

{ #category : #'*Casino-Model-Exporter-Angular' }
CSNService >> getVariableName [
	^ '_', self uniqueName uncapitalized
]

{ #category : #'*Casino-Model-Exporter-Angular' }
CSNService >> prepareAcceptFor: anExporter [
	"be sure create service directory"

	anExporter serviceRoot ensureCreateDirectory
]

{ #category : #'*Casino-Model-Exporter-Angular' }
CSNService >> uniqueName [
	| dic |
	dic := self mooseModel
		cacheAt: #serviceUniqueName
		ifAbsentPut: [ {(self -> self mooseName)} asDictionary ].
	^ dic
		at: self
		ifAbsentPut: [ | index potentialName |
			index := 0.
			potentialName := self mooseName.
			[ dic includes: potentialName ]
				whileTrue: [ potentialName := (potentialName removeSuffix: index asString)
						, index asString.
					index := index + 1 ].
			potentialName ]
]

{ #category : #'*Casino-Model-Exporter-Angular' }
CSNService >> writeCodeWith: anExporter [
	anExporter serviceRoot / self getTSName
		writeStreamDo: [ :stream | 
			stream
				<<
					'import { Injectable } from ''@angular/core'';

import { Observable } from ''rxjs'';
import { first } from ''rxjs/operators'';

import { HttpClient, HttpHeaders, HttpParams } from ''@angular/common/http'';

/**
 * Generated By Casino
 *
 * @author BenoÃ®t Verhaeghe
 */
@Injectable()
export class ' << self uniqueName
				<<
					' {

    constructor(private http: HttpClient) {
    }

'.
			(self actions sorted: #uniqueName ascending) do: [ :action | action writeCodeIn: stream ] separatedBy: [ stream crlf ].
			stream
				<< '}';
				crlf ]
]
