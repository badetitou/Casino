# This is a basic workflow to help you get started with Actions

name: CI

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the development branch
on:
  push:
    branches: 
      - main
      - v*
      - master
  pull_request:
    branches:    
      - main
      - v*
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PROJECT_NAME: Casino
    strategy:
      matrix:
        smalltalk: [ Moose64-10 ]
    name: ${{ matrix.smalltalk }}
    steps:
      - uses: actions/checkout@v2
      
      - uses: hpi-swa/setup-smalltalkCI@v1
        with:
          smalltalk-image: ${{ matrix.smalltalk }}
      
      - run: smalltalkci -s ${{ matrix.smalltalk }}
        shell: bash
        timeout-minutes: 15
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build meta-model planuml image
        run: |
          $SMALLTALK_CI_VM  $SMALLTALK_CI_IMAGE eval "'uml.puml' asFileReference writeStreamDo: [ :stream | stream nextPutAll:  (FamixMMUMLDocumentor new model: CSNModel; beWithStub; generatePlantUMLModel)]."
      - name: Build full meta-model planuml image
        run: |
          $SMALLTALK_CI_VM  $SMALLTALK_CI_IMAGE eval "'full.puml' asFileReference writeStreamDo: [ :stream | stream nextPutAll:  (FamixMMUMLDocumentor new withModel: CSNModel ; withModel: CSNUIModel andColor: Color lightBlue; withModel: CSNLModel andColor: Color lightGreen; withModel: CSNUICWModel andColor: Color lightRed; withModel: CSNBModel andColor: Color lightOrange; withModel: CSNBuModel andColor: Color tan; generatePlantUMLModelWithout: { CSNModel . CSNUIModel. CSNLModel. CSNUICWModel . CSNBModel . CSNBuModel. CSNEntity . CSNOriginedEntity })]."


      - name: Generate SVG Core Diagrams
        uses: rotaract/plantuml-action@v1.3.0
        with:
          format: svg
          pattern: uml.puml
      - name: Generate SVG Full Diagrams
        uses: rotaract/plantuml-action@v1.3.0
        with:
          format: svg
          pattern: full.puml
          
      - name: Move artifact
        run: |
          mkdir doc-uml
          mv uml.svg doc-uml
          mv full.svg doc-uml
      
      - name: Init new repo in dist folder and commit generated files
        run: |
          cd doc-uml/
          git init
          git add -A
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -m 'update doc'
          
      # Careful, this can kill your project
      - name: Force push to destination branch
        uses: ad-m/github-push-action@v0.6.0
        with:
          # Token for the repo. Can be passed in using $\{{ secrets.GITHUB_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force: true
          # Destination branch to push changes
          branch: v2-doc
          # We have to push from the folder where files were generated.
          # Same were the new repo was initialized in the previous step
          directory: ./doc-uml
